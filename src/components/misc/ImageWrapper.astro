---
import path from "path";
import { Image } from "astro:assets";
import { url } from "../../utils/url-utils";

interface Props {
  id?: string;
  src: string;
  class?: string;
  alt?: string;
  position?: string;
  basePath?: string;
  loading?: "eager" | "lazy";
  fetchpriority?: "high" | "low" | "auto";
}

const {
  id,
  src,
  alt,
  position = "center",
  basePath = "/",
  loading = "lazy",
  fetchpriority = "auto",
} = Astro.props;
const className = Astro.props.class;

const isLocal = !(
  src.startsWith("/") ||
  src.startsWith("http") ||
  src.startsWith("https") ||
  src.startsWith("data:")
);

let img = src;

if (isLocal) {
  const files = import.meta.glob<ImageMetadata>("../../**", {
    import: "default",
  });

  const normalizedPath = path
    .normalize(path.join("../../", basePath, src as string))
    .replace(/\\/g, "/");

  const file = files[normalizedPath];
  if (!file) {
    console.error(
      `\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`
    );
  } else {
    img = await file();
  }
}
---

<!-- Se for imagem local, usa o Astro `<Image>` -->{
  isLocal ? (
    <Image
      src={img}
      alt={alt || "Image"}
      class={className || "w-full h-full object-cover"}
      style={`object-position: ${position}`}
    />
  ) : (
    <img
      src={img}
      alt={alt || "Image"}
      class={className || "w-full h-full object-cover"}
      style={`object-position: ${position}`}
      loading={loading}
      fetchpriority={fetchpriority}
    />
  )
}
